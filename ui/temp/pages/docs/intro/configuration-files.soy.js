/* jshint ignore:start */
import Component from 'metal-component';
import Soy from 'metal-soy';
var templates;
goog.loadModule(function(exports) {

// This file was automatically generated from configuration-files.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace docsIntroConfigurationFilesHtml.
 * @public
 */

goog.module('docsIntroConfigurationFilesHtml.incrementaldom');

/** @suppress {extraRequire} */
var soy = goog.require('soy');
/** @suppress {extraRequire} */
var soydata = goog.require('soydata');
/** @suppress {extraRequire} */
goog.require('goog.i18n.bidi');
/** @suppress {extraRequire} */
goog.require('goog.asserts');
/** @suppress {extraRequire} */
goog.require('goog.string');
var IncrementalDom = goog.require('incrementaldom');
var ie_open = IncrementalDom.elementOpen;
var ie_close = IncrementalDom.elementClose;
var ie_void = IncrementalDom.elementVoid;
var ie_open_start = IncrementalDom.elementOpenStart;
var ie_open_end = IncrementalDom.elementOpenEnd;
var itext = IncrementalDom.text;
var iattr = IncrementalDom.attr;

var $templateAlias2 = Soy.getTemplate('ElectricCode.incrementaldom', 'render');

var $templateAlias1 = Soy.getTemplate('guide.incrementaldom', 'render');


/**
 * @param {Object<string, *>=} opt_data
 * @param {(null|undefined)=} opt_ignored
 * @param {Object<string, *>=} opt_ijData
 * @return {void}
 * @suppress {checkTypes}
 */
function $render(opt_data, opt_ignored, opt_ijData) {
  opt_data = opt_data || {};
  var param938 = function() {
    ie_open('h1');
      itext('Understanding Configuration Files');
    ie_close('h1');
    ie_open('h6');
      itext('This is an overview of how WeDeploy uses json files to help you to configure your project.');
    ie_close('h6');
    ie_open('article', null, null,
        'id', 'article_1');
      ie_open('h2');
        itext('Project file reference');
      ie_close('h2');
      ie_open('p');
        itext('The ');
        ie_open('code');
          itext('project.json');
        ie_close('code');
        itext(' file is a JSON file defining the project attributes. The default path for a ');
        ie_open('code');
          itext('project.json');
        ie_close('code');
        itext(' is ');
        ie_open('code');
          itext('./project.json');
        ie_close('code');
        itext('.');
      ie_close('p');
      ie_open('p');
        itext('WeDeploy uses this json file to reference to project in case it\'s already created. If the project does not exist, it creates a new project for you.');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('Supported fields:');
        ie_close('strong');
      ie_close('p');
      ie_open('table', null, null,
          'class', 'table');
        ie_open('tr');
          ie_open('th');
            itext('Field');
          ie_close('th');
          itext(' ');
          ie_open('th');
            itext('Description');
          ie_close('th');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('id');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Project unique id.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('name');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Project name.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('homeContainer');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Service that will be receiving the requests in the base custom domain.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('customDomains');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Custom domains used instead the domain generated by wedeploy.');
          ie_close('td');
        ie_close('tr');
      ie_close('table');
      ie_open('p');
        ie_open('br');
        ie_close('br');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('Validations:');
        ie_close('strong');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('id');
        ie_close('strong');
        itext(': The id must be unique, and you may get an error message in case someone else is already using this project id.');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('customDomains');
        ie_close('strong');
        itext(': The custom domain must be unique, and you may get an error message in case someone else is already using this custom domain.');
      ie_close('p');
      ie_open('p');
        ie_open('br');
        ie_close('br');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('Usage:');
        ie_close('strong');
      ie_close('p');
      ie_open('p');
        ie_open('code');
          itext('project.json');
        ie_close('code');
      ie_close('p');
      $templateAlias2({code: '{\n  "id": "projectexample",\n  "homeContainer": "ui",\n  "customDomains": ["projectexample.wedeploy.com"]\n}', mode: 'json'}, null, opt_ijData);
    ie_close('article');
    ie_open('article', null, null,
        'id', 'article_2');
      ie_open('h2');
        itext('Service file reference');
      ie_close('h2');
      ie_open('p');
        itext('The ');
        ie_open('code');
          itext('container.json');
        ie_close('code');
        itext(' file is a JSON file defining the service attributes and configurations. The default path for a ');
        ie_open('code');
          itext('container.json');
        ie_close('code');
        itext(' is ');
        ie_open('code');
          itext('./<service_folder>/container.json');
        ie_close('code');
        itext('.');
      ie_close('p');
      ie_open('p');
        itext('WeDeploy uses this json file to reference to service in case it\'s already created. If the service does not exist, it creates a new service for you.');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('Supported fields:');
        ie_close('strong');
      ie_close('p');
      ie_open('table', null, null,
          'class', 'table');
        ie_open('tr');
          ie_open('th');
            itext('Field');
          ie_close('th');
          itext(' ');
          ie_open('th');
            itext('Description');
          ie_close('th');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('id');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Service uniq id.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('type');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Service stack/image type.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('hooks');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Callbacks that should be executed in the service lifecycle. Currently allowed: `build`.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('env');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Environment variables to be exported in the service lifecycle.');
          ie_close('td');
        ie_close('tr');
        ie_open('tr');
          ie_open('td');
            itext('description');
          ie_close('td');
          itext(' ');
          ie_open('td');
            itext('Short information about the service.');
          ie_close('td');
        ie_close('tr');
      ie_close('table');
      ie_open('p');
        ie_open('br');
        ie_close('br');
      ie_close('p');
      ie_open('p');
        ie_open('strong');
          itext('Usage:');
        ie_close('strong');
      ie_close('p');
      ie_open('p');
        ie_open('code');
          itext('container.json');
        ie_close('code');
      ie_close('p');
      $templateAlias2({code: '{\n  "id": "conqueror",\n  "type": "wedeploy/java",\n  "description": "WeDeploy Service Example",\n  "hooks": {\n    "build": "./gradlew clean build installDist -x test"\n  },\n  "env": {\n    "WEDEPLOY_USER": "user"\n  }\n}', mode: 'json'}, null, opt_ijData);
    ie_close('article');
  };
  $templateAlias1(soy.$$assignDefaults({content: param938}, opt_data), null, opt_ijData);
}
exports.render = $render;
if (goog.DEBUG) {
  $render.soyTemplateName = 'docsIntroConfigurationFilesHtml.render';
}

exports.render.params = [];
exports.render.types = {};
templates = exports;
return exports;

});

class docsIntroConfigurationFilesHtml extends Component {}
Soy.register(docsIntroConfigurationFilesHtml, templates);
export { docsIntroConfigurationFilesHtml, templates };
export default templates;
/* jshint ignore:end */
