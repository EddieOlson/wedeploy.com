
{namespace docsDataRealTimeFeedsHtml}

/**
 *
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			<h1>Real-time Feeds</h1>
<h6><em>WeDeploy™ Data</em> inverts the traditional database architecture, instead of polling for changes, the developer can tell WeDeploy Data to continuously push updated query results to applications in real-time.</h6>
<article id="article_1">
<h2>Watching data changes</h2>
<p>We presented a lot of features for data filtering and search. You may be wondering where the real-time aspect is in all of this. Well, it's throughout the features we just presented to you. To access our data in real-time, all we need to do is change the <em>WeDeploy™</em> API  <code>get</code> method to use to the <code>watch</code> method:</p>
{call ElectricCode.render}{param code kind="text"}{literal}var data = WeDeploy.data('http://datademo.wedeploy.io');

data.watch('movies')
.on('changes', function(data){
   console.log(data);
})
.on('fail', function(error){
   console.log(error);
});{/literal}{/param}{param mode: 'javascript' /}{/call}<p>Now every time the storage detects changes that affect the query you're watching, you will receive a changes notification with the response body you'd receive if you had done an HTTP GET instead. Furthermore, every time this change leads to an HTTP error response, you'll receive the error object in a fail notification on the client.</p>
</article>  
<article id="article_2">
<h2>Watching with advanced filters</h2>
<p>To present data using advanced search is simple as performing normal queries. You just would need to keep using the <code>watch</code> method and apply any filter you desire.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.data('http://datademo.wedeploy.io')
.where('category', 'cinema')
.or('category', 'cartoon')
.watch('movies')
.on('changes', function(data){
   console.log(data);
})
.on('fail', function(error){
   console.log(error);
});{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<article id="article_3">
<h2>Getting the latest changes</h2>
<p>The data service uses a query limit <code>500</code> by default. In order to always get the latest new record, you would need to limit the query by <code>1</code> and order by <code>id</code> <code>desc</code>.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.data('http://datademo.wedeploy.io')
.limit(1)
.orderBy('id', 'desc')
.watch('movies')
.on('changes', function(data){
   console.log(data);
})
.on('fail', function(error){
   console.log(error);
});{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<h2>What's next?</h2>
<ul>
<li>Now we're ready to save and retrieve data in real-time.</li>
</ul>

		{/param}
	{/call}
{/template}
