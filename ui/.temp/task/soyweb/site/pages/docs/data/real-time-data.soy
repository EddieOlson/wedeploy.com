---
title: "Real-time Data"
description: "Instead of polling for changes, a developer can tell WeDeploy Data to continuously fetch updated query results in real-time."
headerTitle: "Data"
layout: "guide"
weight: 5
srcFilePath: src/pages/docs/data/real-time-data.md
---

{namespace zpJEZ}

/**
 * @param page
 * @param site
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			
<h3>{$page.title}</h3>
<h6>{$page.description}</h6>
<aside>
<p>If you are unfamiliar with our API, please visit the <a href="/docs/intro/api-clients.html">API Clients</a> page first to learn how to install and configure it.</p>
</aside>
<article id="1">
<h2>Watching data changes</h2>
<p>We presented a lot of features for data filtering and search. You may be wondering where the real-time aspect is in all of this. Well, it's throughout the features we just presented to you. To access our data in real-time, all we need to do is change the <em>WeDeploy</em> API  <code>get</code> method to use to the <code>watch</code> method:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .watch('movies')
    .on('changes', function(data) {
        console.log(data);
    })
    .on('fail', function(error) {
        console.log(error);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}// You have to hold a strong reference to the socket or it will be released
socket = WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .watch(resourcePath: "movies")

socket.on([.changes, .error]) { data in
    switch(data.type) {
    case .changes:
        print("changes \(data.document)")
    case .error:
        print("error \(data.document)")
    default:
        break
    }
}{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .watch("movies")
    .on("changes", data -> System.out.println(data))
    .on("fail", error -> System.out.println(error));{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>Now every time the storage detects changes that affect the query you're watching, you will receive a changes notification with the response body you'd receive if you had done an HTTP GET instead. Furthermore, every time this change leads to an HTTP error response, you'll receive the error object in a fail notification on the client.</p>
</article>
<article id="2">
<h2>Watching with advanced filters</h2>
<p>To present data using advanced search is simple as performing normal queries. You just would need to keep using the <code>watch</code> method and apply any filter you desire.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where('category', 'cinema')
    .or('category', 'cartoon')
    .watch('movies')
    .on('changes', function(data) {
        console.log(data);
    })
    .on('fail', function(error) {
        console.log(error);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}// You have to hold a strong reference to the socket or it will be released
socket = WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where(field: "category", op: "=", value: "cinema")
    .or(field: "category", op: "=", value: "cartoon")
    .watch(resourcePath: "movies")

socket.on([.changes, .error]) { data in
    switch(data.type) {
    case .changes:
        print("changes \(data.document)")
    case .error:
        print("error \(data.document)")
    default:
        break
    }
}{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .where(equal("category", "cinema").or("category", "cartoon"))
    .watch("movies")
    .on("changes", data -> System.out.println(data))
    .on("fail", error -> System.out.println(error));{/literal}{/param}{param mode: 'text/x-java' /}{/call}</article>
<article id="3">
<h2>Getting the latest changes</h2>
<p>The data service uses a query limit <code>500</code> by default. In order to always get the latest new record, you would need to limit the query by <code>1</code> and order by <code>id</code> <code>desc</code>.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .limit(1)
    .orderBy('id', 'desc')
    .watch('movies')
    .on('changes', function(data) {
        console.log(data);
    })
    .on('fail', function(error) {
        console.log(error);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}// You have to hold a strong reference to the socket or it will be released
socket = WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .limit(1)
    .orderBy(field: "id", order: .DESC)
    .watch(resourcePath: "movies")

socket.on([.changes, .error]) { data in
    switch(data.type) {
    case .changes:
        print("changes \(data.document)")
    case .error:
        print("error \(data.document)")
    default:
        break
    }
}{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .limit(1)
    .orderBy("id", SortOrder.DESCENDING)
    .watch("movies")
    .on("changes", data -> System.out.println(data))
    .on("fail", error -> System.out.println(error));{/literal}{/param}{param mode: 'text/x-java' /}{/call}</article>
<h2>What's next?</h2>
<p>Now that you've learned how to use real-time, you can start <a href="/docs/data/searching-data.html">searching data</a>.</p>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}


/**
 *
 */
{template .soyweb}
	{call base.render data="all"}
		{param content kind="html"}
			{call .render data="all" /}
		{/param}
	{/call}
{/template}
