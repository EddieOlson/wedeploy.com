---
title: "Add API Methods"
description: "In this section, you'll learn how to save and get data on Android using the WeDeploy API Client."
buttonTitle: "I added the API methods"
tutorialTitle: "Getting started with WeDeploy Data on Android"
parentId: "data-android"
layout: "tutorial"
time: 80
weight: 8
srcFilePath: src/pages/tutorials/data-android/add-api-methods.md
---

{namespace rEhWc}

/**
 * @param page
 * @param site
 */
{template .render}
	{call tutorial.render data="all"}
		{param content kind="html"}
			
<h4>Add API Methods</h4>
<h6>Save Data</h6>
<p>Now we want to add some code that will save data to a collection.</p>
<p>To do this, go to <code>AddToDoActivity.java</code> and paste this code into the &quot;addToDo&quot; method:</p>
{call ElectricCode.render}{param code kind="text"}{literal}weDeploy.data("data-<projectID>.wedeploy.sh")
    .create("tasks", jsonObject)
    .execute(new Callback() {
        @Override
        public void onSuccess(Response response) {
            Toast.makeText(AddToDoActivity.this, "To do added", Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onFailure(Exception e) {
            Toast.makeText(AddToDoActivity.this, "Error adding to do", Toast.LENGTH_SHORT)
                .show();
        }
    });{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<h6>Fetch Data</h6>
<p>Next, we want to add the code that will fetch data from the collection.</p>
<p>To do this, go to <code>ToDoListActivity.java</code> and paste this code into the &quot;populateList&quot; method:</p>
{call ElectricCode.render}{param code kind="text"}{literal}weDeploy.data("data-<projectID>.wedeploy.sh")
    .limit(5)
    .orderBy("id", SortOrder.DESCENDING)
    .get("tasks")
    .execute(new Callback() {
        @Override
        public void onSuccess(Response response) {
            try {
                JSONArray array = new JSONArray(response.getBody());
                parseAndAddTodos(array);
            } catch (JSONException e) {
                onFailure(e);
            }
        }

        @Override
        public void onFailure(Exception e) {
            Toast.makeText(ToDoListActivity.this, "Error loading todos", Toast.LENGTH_SHORT).show();
        }
    });{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<aside>
<h6><span class="icon-16-star"></span> Pro Tip</h6>
<p>In this tutorial we teach you how to use the <code>.get()</code> method which fetches the data from your collection everytime you refresh the page or make a new request. We also have a <code>.watch()</code> task which retrieves new data automatically when new data is created, giving you the power of real-time data!</p>
<p>Want to learn more about <a href="/docs/data/real-time-feeds.html" target="_blank">Real-Time Feeds</a>?</p>
</aside>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}


/**
 *
 */
{template .soyweb}
	{call base.render data="all"}
		{param content kind="html"}
			{call .render data="all" /}
		{/param}
	{/call}
{/template}
