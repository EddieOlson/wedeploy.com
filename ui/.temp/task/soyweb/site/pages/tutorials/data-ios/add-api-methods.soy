---
title: "Add API Methods"
description: "In this section, you'll learn how to save and get data on iOS using the WeDeploy Swift API Client."
buttonTitle: "I added the API methods"
tutorialTitle: "Getting started with WeDeploy Data on iOS"
parentId: "data-ios"
layout: "tutorial"
time: 80
weight: 8
srcFilePath: src/pages/tutorials/data-ios/add-api-methods.md
---

{namespace lIiLz}

/**
 * @param page
 * @param site
 */
{template .render}
	{call tutorial.render data="all"}
		{param content kind="html"}
			
<h4>Add API Methods</h4>
<h6>Save Data</h6>
<p>Now we want to add some code that will save data to a collection.</p>
<p>To do this, go to <code>tutorial-data-ios/app/tutorial-data-ios/ToDoListViewController.swift</code> and paste this code into the &quot;loadToDos&quot; function:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.data("data-<projectID>.wedeploy.sh")
    .create(resource: "tasks", object: ["name" : todo])
    .toCallback { objectCreated, error in
        if let objectCreated = objectCreated {
            print("To do added: \(objectCreated)")
            self.toDoTextField.text = ""
        }
        else {
            print("Error: \(error!)")
        }
    }{/literal}{/param}{param mode: 'swift' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<h6>Fetch Data</h6>
<p>Next, we want to add the code that will fetch data from the collection.</p>
<p>To do this, go to <code>tutorial-data-ios/app/tutorial-data-ios/AddToDoViewController.swift</code> and paste this cod into the &quot;addToDoClic&quot; function:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.data("data-<projectID>.wedeploy.sh")
    .orderBy(field: "id", order: .DESC)
    .limit(5)
    .get(resourcePath: "tasks")
    .toCallback { tasks, error in
        if let tasks = tasks {
            self.todos = tasks.map({ $0["name"] as! String})
            self.tableView.reloadData()
        }
        else {
            print("Error: \(error!)")
        }
    }{/literal}{/param}{param mode: 'swift' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<aside>
<h6><span class="icon-16-star"></span> Pro Tip</h6>
<p>In this tutorial we teach you how to use the <code>.get()</code> method which fetches the data from your collection everytime you refresh the page or make a new request. We also have a <code>.watch()</code> task which retrieves new data automatically when new data is created, giving you the power of real-time data!</p>
<p>Want to learn more about <a href="/docs/data/real-time-feeds.html" target="_blank">Real-Time Feeds</a>?</p>
</aside>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}


/**
 *
 */
{template .soyweb}
	{call base.render data="all"}
		{param content kind="html"}
			{call .render data="all" /}
		{/param}
	{/call}
{/template}
