
{namespace RaDLb}

/**
 * @param page
 * @param site
 */
{template .render}
	{call tutorial.render data="all"}
		{param content kind="html"}
			
<h4>Add API Methods</h4>
<h6>Create User</h6>
<p>First, let's add the code that will allow users to create an account.</p>
<p>To do this, go to <code>tutorial-auth-ios/app/tutorial-auth-ios/SignUpViewController.swift</code> and paste this code in the &quot;signUpButtonClick&quot; function:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.auth("auth-<projectID>.wedeploy.sh")
    .createUser(email: emailText, password: passwordText, name: nameText)
    .toCallback { auth, error in
        if let _ = auth {
            self.showAlert(with: "Success", message: "Sign-up successfully")
        }
        else {
            self.showAlert(with: "Error", message: "Sign-up failed.")
        }
    }{/literal}{/param}{param mode: 'swift' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<h6>Sign-in</h6>
<p>Next, let's add the code that will allow users to sign-in.</p>
<p>First of all, go to <code>tutorial-auth-ios/app/tutorial-auth-ios/LoginViewController.swift</code>, and paste this code in the &quot;loginButtonClick&quot; function:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.auth("auth-<projectID>.wedeploy.sh")
    .signInWith(username: usernameText, password: passwordText)
    .toCallback { auth, error in
        self.handleLoginResult(auth: auth, error: error)
    }{/literal}{/param}{param mode: 'swift' /}{/call}<p><strong>Note:</strong> make sure to replace <code>&lt;projectID&gt;</code> with the id of your project.</p>
<aside>
<h6><span class="icon-16-star"></span> Pro Tip</h6>
<p>In the examples above we use the toCallback method to handle the response with a callback, which is the most typical way of doing it in the iOS ecosystem,
but we can also handle the result using a promise:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.auth("auth-<projectID>.wedeploy.sh")
    .signInWith(username: usernameText, password: passwordText)
    .then { auth in
        self.handleLoginResult(auth: auth, error: nil)
    }
    .catch { error in
        self.handleLoginResult(auth: nil, error: error)
    }{/literal}{/param}{param mode: 'swift' /}{/call}<p>or even a observable!</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy.auth("auth-<projectID>.wedeploy.sh")
    .signInWith(username: usernameText, password: passwordText)
    .toObservable()
    .subscribe(onNext: { auth in
        self.handleLoginResult(auth: auth, error: nil)
    }, onError: { error in
        self.handleLoginResult(auth: nil, error: error)
    }){/literal}{/param}{param mode: 'swift' /}{/call}</aside>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}
