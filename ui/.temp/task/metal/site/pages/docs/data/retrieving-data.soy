
{namespace aiKSd}

/**
 * @param page
 * @param site
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			
<h3>{$page.title}</h3>
<h6>{$page.description}</h6>
<aside>
<p>If you are unfamiliar with our API, please visit the <a href="/docs/intro/api-clients.html">API Clients</a> page first to learn how to install and configure it.</p>
</aside>
<article id="1">
<h2>Get data</h2>
<p>Reading data from our storage takes only 3 lines of code.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .get('movies/star_wars_v')
    .then(function(movie) {
        console.log(movie);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .get(resourcePath: "movies/star_wars_v")
    .then { movie in
        print(movie)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .get("movies/star_wars_v")
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>The response body is the stored JSON document:</p>
{call ElectricCode.render}{param code kind="text"}{literal}{
    "id": "star_wars_v",
    "title": "Star Wars: Episode V - The Empire Strikes Back",
    "year": 1980,
    "rating": 8.8
}{/literal}{/param}{param mode: 'javascript' /}{/call}<p>We can also get any field value using the full path:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .get('movies/star_wars_v/title')
    .then(function(title) {
        console.log(title);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .get(resourcePath: "movies/star_wars_v/title")
    .then { (movie: String) in // You have to specify the type here to allow compiler infer type
        print(movie)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .get("movies/star_wars_v/title")
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>The full path returns the raw content in the response body:</p>
{call ElectricCode.render}{param code kind="text"}{literal}[
    {"id":"star_wars_i", "title":"Star Wars: Episode I - The Phantom Menace", "year":1999, "rating":6.5},
    {"id":"star_wars_ii", "title":"Star Wars: Episode II - Attack of the Clones", "year":2002, "rating":6.7},
    {"id":"star_wars_iii", "title":"Star Wars: Episode III - Revenge of the Sith", "year":2005, "rating":7.7},
    {"id":"star_wars_iv", "title":"Star Wars: Episode IV - A New Hope", "year":1977, "rating":8.7},
    {"id":"star_wars_v", "title":"Star Wars: Episode V - The Empire Strikes Back", "year":1980, "rating":8.8},
    {"id":"star_wars_vi", "title":"Star Wars: Episode VI - Return of the Jedi", "year":1983, "rating":8.4},
    {"id":"star_wars_vii", "title":"Star Wars: Episode VII - The Force Awakens", "year":2015}
]{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<article id="2">
<h2>Sorting data</h2>
<p>The result is ordered by document id, as we can see in the list above. We can select the order of the results by passing a sort parameter, using the following code:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .orderBy('rating', 'desc')
    .get('movies')
    .then(function(movies) {
        console.log(movies);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .orderBy(field: "rating", order: .DESC)
    .get(resourcePath: "movies")
    .then { movies in
        print(movies)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .orderBy("rating", SortOrder.DESCENDING)
    .get("movies")
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>As expected, the result would be the following list:</p>
{call ElectricCode.render}{param code kind="text"}{literal}[
    {"id":"star_wars_v","title":"Star Wars: Episode V - The Empire Strikes Back","year":1980,"rating":8.8},
    {"id":"star_wars_iv","title":"Star Wars: Episode IV - A New Hope","year":1977,"rating":8.7},
    {"id":"star_wars_vi","title":"Star Wars: Episode VI - Return of the Jedi","year":1983,"rating":8.4},
    {"id":"star_wars_iii","title":"Star Wars: Episode III - Revenge of the Sith","year":2005,"rating":7.7},
    {"id":"star_wars_ii","title":"Star Wars: Episode II - Attack of the Clones","year":2002,"rating":6.7},
    {"id":"star_wars_i","title":"Star Wars: Episode I - The Phantom Menace","year":1999,"rating":6.5},
    {"id":"star_wars_vii","title":"Star Wars: Episode VII - The Force Awakens","year":2015}
]{/literal}{/param}{param mode: 'javascript' /}{/call}<p>Notice that because Episode VII has no rating (as it was not released yet), it's sorted as the last document.</p>
</article>
<article id="3">
<h2>Applying filters</h2>
<p>In addition to sorting the results, we can also apply filters using the following code:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where('year', '<', 2000)
    .or('rating', '>', 8.5)
    .get('movies')
    .then(function(movies) {
        console.log(movies);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where(field: "year", op: "<", value: 2000)
    .or(field: "rating", op: ">", value: 8.5)
    .get(resourcePath: "movies")
    .then { movies in
        print(movies)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .where(lt("year", 2000).or(gt("rating", 8.5)))
    .get("movies")
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>The following entries are the result of the above filters:</p>
{call ElectricCode.render}{param code kind="text"}{literal}[
    {"id":"star_wars_iv","title":"Star Wars: Episode IV - A New Hope","year":1977,"rating":8.7},
    {"id":"star_wars_v","title":"Star Wars: Episode V - The Empire Strikes Back","year":1980,"rating":8.8}
]{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<article id="4">
<h2>Pagination</h2>
<p>We can also paginate the result using the 'limit' and 'offset' properties. Combining all the tools we've learned so far, we can run a detailed query on our data:</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where('year', '>', 2000)
    .orderBy('rating')
    .limit(2)
    .offset(1)
    .get('movies')
    .then(function(movies) {
        console.log(movies);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .where(field: "year", op: "<", value: 2000)
    .orderBy(field: "rating", order: .ASC)
    .limit(2)
    .offset(1)
    .get(resourcePath: "movies")
    .then { movies in
        print(movies)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .where(gt("year", 2000))
    .orderBy("rating")
    .limit(2)
    .offset(1)
    .get("movies")
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>Notice that filtering by year only returns episodes I, II, III, and VII. Applying the 'rating' sort will give us this same order. We also limited the result to show only two documents and skip the first one. The final result is the following entries:</p>
{call ElectricCode.render}{param code kind="text"}{literal}[
    {"id":"star_wars_ii","title":"Star Wars: Episode II - Attack of the Clones","year":2002,"rating":6.7},
    {"id":"star_wars_iii","title":"Star Wars: Episode III - Revenge of the Sith","year":2005,"rating":7.7}
]{/literal}{/param}{param mode: 'javascript' /}{/call}<p>We support all basic SQL-like operators (=, !=, &gt;, &gt;=, &lt;, &lt;=, ~), as well as 'any' and 'none' to filter elements in a list. We also give support for search operators, which we will see in more detail in the section Search Data.</p>
</article>
<h2>What's next?</h2>
<p>Now that you've learned how to retrieve, you can start <a href="/docs/data/real-time-data.html">using real-time</a>.</p>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}
