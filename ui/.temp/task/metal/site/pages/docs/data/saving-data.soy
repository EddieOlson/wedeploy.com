
{namespace kkkql}

/**
 * @param page
 * @param site
 */
{template .render}
	{call guide.render data="all"}
		{param content kind="html"}
			
<h3>{$page.title}</h3>
<h6>{$page.description}</h6>
<aside>
<p>If you are unfamiliar with our API, please visit the <a href="/docs/intro/api-clients.html">API Clients</a> page first to learn how to install and configure it.</p>
</aside>
<article id="1">
<h2>Inserting new data</h2>
<p>Writing new data is as simple as sending a JSON.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create('movies', {
        "title": "Star Wars IV",
        "year": 1977,
        "rating": 8.7
    }).then(function(movie) {
        console.log(movie);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create(resource: "movies", object: [
        "title" : "Star Wars IV",
        "year" : 1977,
        "ratings" : 8.7
    ])
    .then { movie in
        print(movie)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}JSONObject movieJsonObject = new JSONObject()
    .put("title", "Star Wars IV")
    .put("year", 1977)
    .put("rating", 8.7);

WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .create("movies", movieJsonObject)
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>This operation will return the newly created document, with the following generated ID:</p>
{call ElectricCode.render}{param code kind="text"}{literal}{
    "id":" "115992383516607958",
    "title": "Star Wars IV",
    "year": 1977,
    "rating": 8.7
}{/literal}{/param}{param mode: 'javascript' /}{/call}<p>Generated ID is a string and it's structure may vary. It is also possible to define custom app-specific value for the ID, by simply passing the <code>id</code> field as part of the new document.</p>
</article>
<article id="2">
<h2>Inserting multiple data</h2>
<p>With the same method you're able to create multiple data instead using the same method multiple times. You just need to use an array instead an object.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create('movies', [
        {
            "title": "Star Wars III",
            "year": 2005,
            "rating": 8.0
        },
        {
            "title": "Star Wars II",
            "year": 2002,
            "rating": 8.6
        }
    ]).then(function(movies) {
        console.log(movies);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create(resource: "movies", object: [
    [
        "title" : "Star Wars III",
        "year" : 2005,
        "ratings" : 8.0
    ],
    [
        "title" : "Star Wars II",
        "year" : 2002,
        "ratings" : 8.6
    ]
    ])
    .then { movie in
        print(movie)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}JSONObject movie1JsonObject = new JSONObject()
    .put("title", "Star Wars III")
    .put("year", 2005)
    .put("rating", 8.0);

JSONObject movie2JsonObject = new JSONObject()
    .put("title", "Star Wars II")
    .put("year", 2002)
    .put("rating", 8.6);

JSONArray moviesJsonArray = new JSONArray()
    .put(movie1JsonObject)
    .put(movie2JsonObject);

WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .create("movies", moviesJsonArray)
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>This operation will return the newly created array of documents, with the following generated IDs:</p>
{call ElectricCode.render}{param code kind="text"}{literal}[
    {
        "id":" 115992383516607959",
        "title": "Star Wars III",
        "year": 2005,
        "rating": 8.0
    },
    {
        "id":" 115992383516607954",
        "title": "Star Wars II",
        "year": 2002,
        "rating": 8.6
    }
]{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<article id="3">
<h2>Inserting new fields in an existing collection</h2>
<p>WeDeploy Data service is really flexible in therms of data structure. You're able to insert new fiels in a collection by adding the new key in the object param.</p>
{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create('movies', [
        {
            "title": "Star Wars I",
            "obs": "First in ABC order",
            "year": 1999,
            "rating": 9.0
        }
    ]).then(function(movie) {
        console.log(movie);
    });{/literal}{/param}{param mode: 'javascript' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}WeDeploy
    .data('https://<serviceID>-<projectID>.wedeploy.io')
    .create(resource: "movies", object: [
        "title": "Star Wars I",
        "obs": "First in ABC order",
        "year": 1999,
        "rating": 9.0
    ])
    .then { movie in
        print(movie)
    }{/literal}{/param}{param mode: 'swift' /}{/call}{call ElectricCode.render}{param code kind="text"}{literal}JSONObject movieJsonObject = new JSONObject()
    .put("title", "Star Wars I")
    .put("obs", "First in ABC order")
    .put("year", 1999)
    .put("rating", 9.0);

WeDeploy
    .data('https://data-datademo.wedeploy.io')
    .create("movies", movieJsonObject)
    .execute();{/literal}{/param}{param mode: 'text/x-java' /}{/call}<p>This operation will return the newly created document, with the following generated ID:</p>
{call ElectricCode.render}{param code kind="text"}{literal}{
    "id":" 115992383516607954",
    "title": "Star Wars I",
    "obs": "First in ABC order",
    "year": 1999,
    "rating": 9.0
}{/literal}{/param}{param mode: 'javascript' /}{/call}</article>
<article id="4">
<h2>URL scope structure</h2>
<p>The URL we just created stored a new document in our app's service inside the &quot;movies&quot; collection. More information on how to set up this datastore URL can be seen in the section Building APIs. For now, we only need to know that within the path where the data is mounted. The URL will be interpreted as a key that points to a stored resource like the one below:</p>
{call ElectricCode.render}{param code kind="text"}{literal}/collectionName/documentId/documentProperty/documentInnerProperty{/literal}{/param}{param mode: 'text' /}{/call}<p>For example, to reference the newly created Star Wars rating, we can use the path:</p>
{call ElectricCode.render}{param code kind="text"}{literal}https://<serviceID>-<projectID>.wedeploy.io/movies/115992383516607958/rating{/literal}{/param}{param mode: 'text' /}{/call}</article>
<h2>What's next?</h2>
<p>Now that you've learned how to save, you can start <a href="/docs/data/retrieving-data.html">retrieving data</a>.</p>


			<input type="hidden" value="{$page.title}">
			<input type="hidden" value="{$site.title}">
		{/param}
	{/call}
{/template}
