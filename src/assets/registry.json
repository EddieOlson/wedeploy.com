[{
	"color": "e6e7e7",
	"readmeAsHtml": "<h1>Liferay Portal 7.0.0<\/h1>\n<p>This container provides a Liferay Portal that can be installed inside Launchpad infrastructure. Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more.<\/p>",
	"name": "Liferay Portal",
	"description": "Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more",
	"iconUrl": "\/static\/registry\/liferay\/icon.png",
	"readme": "Liferay Portal 7.0.0\n=============\n\nThis container provides a Liferay Portal that can be installed inside Launchpad infrastructure. Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more.\n",
	"id": "liferay",
	"category": "Portal Server",
	"type": "liferay"
}, {
	"color": "77d55a",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-data\" name=\"wedeploy-data\">WeDeploy Data<\/a><\/h1>\n<p>This container provides a powerful data microservice with real-time capabilities for WeDeploy.<\/p>",
	"name": "WeDeploy Data",
	"description": "Scalable JSON database with search and realtime that makes building realtime apps dramatically easier",
	"iconUrl": "\/static\/registry\/wedeploy-data\/icon.png",
	"readme": "WeDeploy Data\n=============\n\nThis container provides a powerful data microservice with real-time capabilities for WeDeploy.\n",
	"id": "wedeploy-data",
	"category": "Infrastructure",
	"type": "wedeploy\/data:latest"
}, {
	"color": "ffb700",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-email\" name=\"wedeploy-email\">WeDeploy Email<\/a><\/h1>\n<p>This container provides a powerful email microservice for WeDeploy. It&rsquo;s able to queue and send emails asynchronously, via RESTful APIs.<\/p>\n<ol>\n  <li>Launch your project in a few clicks.<\/li>\n  <li>Queue and send emails asynchronously.<\/li>\n  <li>Simple RESTful API.<\/li>\n<\/ol>\n<h2><a href=\"#usage\" name=\"usage\">Usage<\/a><\/h2>\n<p>The first thing you have to do is install the container with an id of your preference, e.g. <code>email<\/code>. After the container is installed, you can use the exposed RESTful APIs to send emails.<\/p>\n<h3><a href=\"#sending-emails\" name=\"sending-emails\">Sending Emails<\/a><\/h3>\n<p><code>POST \/emails<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/email.&lt;project&gt;.wedeploy.io\/emails&#39;)\n\t.form(&#39;from&#39;, &#39;from@domain.com&#39;)\n\t.form(&#39;to&#39;, &#39;to@domain.com&#39;)\n\t.form(&#39;message&#39;, &#39;Hi there!&#39;)\n\t.form(&#39;subject&#39;, &#39;Subject&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The email was successfully sent.\n\t\tconsole.log(&#39;Email id:&#39;, response.body());\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>bcc <\/td>\n      <td>string <\/td>\n      <td>Bcc recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n    <tr>\n      <td>cc <\/td>\n      <td>string <\/td>\n      <td>Cc recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n    <tr>\n      <td>from <\/td>\n      <td>string <\/td>\n      <td>Sender email address.<\/td>\n    <\/tr>\n    <tr>\n      <td>message <\/td>\n      <td>string <\/td>\n      <td>HTML content of your email message. Up to 5MB.<\/td>\n    <\/tr>\n    <tr>\n      <td>priority <\/td>\n      <td>number <\/td>\n      <td>Used by email clients to define a message&rsquo;s importance. From 1 to 5 where &lsquo;1&rsquo; is highest and &lsquo;5&rsquo; is the lowest priority.<\/td>\n    <\/tr>\n    <tr>\n      <td>replyTo <\/td>\n      <td>string <\/td>\n      <td>Append a reply-to address to your email message.<\/td>\n    <\/tr>\n    <tr>\n      <td>subject <\/td>\n      <td>string <\/td>\n      <td>Subject of your email. Up to 1MB.<\/td>\n    <\/tr>\n    <tr>\n      <td>to <\/td>\n      <td>string <\/td>\n      <td>Recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#checking-email-status\" name=\"checking-email-status\">Checking Email Status<\/a><\/h3>\n<p><code>GET \/emails\/:id\/status<\/code><\/p>\n<p>Let&rsquo;s say the email sent on the previous example returns the id <code>123<\/code>. In order to check its status you can request:<\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/email.&lt;project&gt;.wedeploy.io\/emails\/123\/status&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;Email status:&#39;, response.body());\n\t});\n<\/code><\/pre>",
	"name": "WeDeploy Email",
	"description": "Send emails in one click by using this powerful email microservice via RESTful apis",
	"iconUrl": "\/static\/registry\/wedeploy-email\/icon.png",
	"readme": "WeDeploy Email\n=============\n\nThis container provides a powerful email microservice for WeDeploy. It's able to queue and send emails asynchronously, via RESTful APIs.\n\n0. Launch your project in a few clicks.\n0. Queue and send emails asynchronously.\n0. Simple RESTful API.\n\nUsage\n-----\n\nThe first thing you have to do is install the container with an id of your preference, e.g. `email`. After the container is installed, you can use the exposed RESTful APIs to send emails.\n\n\n### Sending Emails\n\n`POST \/emails`\n\n```js\nWeDeploy.url('http:\/\/email.<project>.wedeploy.io\/emails')\n\t.form('from', 'from@domain.com')\n\t.form('to', 'to@domain.com')\n\t.form('message', 'Hi there!')\n\t.form('subject', 'Subject')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The email was successfully sent.\n\t\tconsole.log('Email id:', response.body());\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type    | Description\n------------ | ------- | ------------\nbcc\t\t\t | string  | Bcc recipient email address. Multiple addresses should be defined in multiple parameters.\ncc\t\t\t | string  | Cc recipient email address. Multiple addresses should be defined in multiple parameters.\nfrom\t\t | string  | Sender email address.\nmessage\t\t | string  | HTML content of your email message. Up to 5MB.\npriority\t | number  | Used by email clients to define a message's importance. From 1 to 5 where '1' is highest and '5' is the lowest priority.\nreplyTo\t\t | string  | Append a reply-to address to your email message.\nsubject\t\t | string  | Subject of your email. Up to 1MB.\nto\t\t\t | string  | Recipient email address. Multiple addresses should be defined in multiple parameters.\n\n### Checking Email Status\n\n`GET \/emails\/:id\/status`\n\nLet's say the email sent on the previous example returns the id `123`. In order to check its status you can request:\n\n```js\nWeDeploy.url('http:\/\/email.<project>.wedeploy.io\/emails\/123\/status')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('Email status:', response.body());\n\t});\n```\n",
	"id": "wedeploy-email",
	"category": "Infrastructure",
	"type": "wedeploy\/email:latest"
}, {
	"color": "ff536b",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-engine\" name=\"wedeploy-engine\">WeDeploy Engine<\/a><\/h1>",
	"name": "WeDeploy Engine",
	"description": "Deploy your Java or static code using the power of WeDeploy Engine",
	"iconUrl": "\/static\/registry\/wedeploy-engine\/icon.png",
	"readme": "WeDeploy Engine\n================\n",
	"id": "wedeploy-engine",
	"category": "Infrastructure",
	"type": "wedeploy\/engine:latest"
}, {
	"color": "00a4ff",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-hosting\" name=\"wedeploy-hosting\">WeDeploy Hosting<\/a><\/h1>\n<p>Easily deploy and host your app&rsquo;s static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service.<\/p>",
	"name": "WeDeploy Hosting",
	"description": "Easily deploy and host your app's static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service",
	"iconUrl": "\/static\/registry\/wedeploy-hosting\/icon.png",
	"readme": "WeDeploy Hosting\n================\n\nEasily deploy and host your app's static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service.\n",
	"id": "wedeploy-hosting",
	"category": "Infrastructure",
	"type": "wedeploy\/hosting:latest"
}, {
	"color": "ff536b",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-maven\" name=\"wedeploy-maven\">WeDeploy Maven<\/a><\/h1>",
	"name": "WeDeploy Maven",
	"description": "Deploy your maven project using the power of WeDeploy Engine",
	"iconUrl": "\/static\/registry\/wedeploy-maven\/icon.png",
	"readme": "WeDeploy Maven\n===============\n",
	"id": "wedeploy-maven",
	"category": "Infrastructure",
	"type": "wedeploy\/maven:latest"
}, {
	"color": "9552ef",
	"readmeAsHtml": "<h1><a href=\"#wedeploy-users\" name=\"wedeploy-users\">WeDeploy Users<\/a><\/h1>\n<p>This container provides a powerful users microservice for WeDeploy. It&rsquo;s able to sign up, login, logout, and manage users, via RESTful APIs.<\/p>\n<ol>\n  <li>Launch your project in a few clicks.<\/li>\n  <li>Signup, login, and logout APIs.<\/li>\n  <li>Send reset password link and reset password APIs.<\/li>\n  <li>Configure your login and logout redirect URLs.<\/li>\n  <li>Securely store the user&rsquo;s password.<\/li>\n  <li>Simple RESTful API.<\/li>\n<\/ol>\n<h2><a href=\"#usage\" name=\"usage\">Usage<\/a><\/h2>\n<p>The first thing you have to do is install the container with an id of your preference, e.g. <code>users<\/code>. After the container is installed, the users container exposes RESTful APIs for you to use.<\/p>\n<h3><a href=\"#create-a-user\" name=\"create-a-user\">Create a User<\/a><\/h3>\n<p><code>POST \/data<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data&#39;)\n\t.form(&#39;email&#39;, &#39;user@domain.com&#39;)\n\t.form(&#39;password&#39;, &#39;password&#39;)\n\t.form(&#39;foo&#39;, &#39;bar&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ User stored!\n\t\tconsole.log(&#39;User id&#39;, response.body().id);\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>password <\/td>\n      <td>string (required) <\/td>\n      <td>The password used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>permissions <\/td>\n      <td>array.<string> <\/td>\n      <td>Array of strings with user permissions.<\/td>\n    <\/tr>\n    <tr>\n      <td>roles <\/td>\n      <td>array.<string> <\/td>\n      <td>Array of strings with user roles.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#get-all-users\" name=\"get-all-users\">Get All Users<\/a><\/h3>\n<p><code>GET \/data<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;All users&#39;, response.body());\n\t});\n<\/code><\/pre>\n<h3><a href=\"#get-a-user\" name=\"get-a-user\">Get a User<\/a><\/h3>\n<p><code>GET \/data\/:id<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;User&#39;, response.body());\n\t});\n<\/code><\/pre>\n<h3><a href=\"#delete-a-user\" name=\"delete-a-user\">Delete a User<\/a><\/h3>\n<p><code>DELETE \/data\/:id<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123&#39;)\n\t.delete()\n\t.then(function(response) {\n\t\t\/\/ The user was successfully deleted.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#send-reset-password-link-to-a-user\" name=\"send-reset-password-link-to-a-user\">Send Reset Password Link to a User<\/a><\/h3>\n<p><code>POST \/reset-password-link<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/reset-password-link&#39;)\n    .form(&#39;email&#39;, &#39;user@domain.com&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The reset password link was successfully sent.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3>Reset a User&rsquo;s Password<\/h3>\n<p><code>POST \/reset-password<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/reset-password-link&#39;)\n    .form(&#39;email&#39;, &#39;user@domain.com&#39;)\n    .form(&#39;password&#39;, &#39;newPassword&#39;)\n    .form(&#39;token&#39;, &#39;token&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The password was successfully reset.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>password <\/td>\n      <td>string (required) <\/td>\n      <td>The new password used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>token <\/td>\n      <td>string (required) <\/td>\n      <td>The reset password token received on the email.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#add-permissions-for-a-user\" name=\"add-permissions-for-a-user\">Add Permissions for a User<\/a><\/h3>\n<p><code>PATCH \/data\/:id\/permissions<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123\/permissions&#39;)\n\t.patch(&quot;newPermission&quot;)\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#update-permissions-for-a-user\" name=\"update-permissions-for-a-user\">Update Permissions for a User<\/a><\/h3>\n<p><code>PUT \/data\/:id\/permissions<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123\/permissions&#39;)\n\t.put([&quot;permission1&quot;, &quot;permission2&quot;])\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#add-roles-for-a-user\" name=\"add-roles-for-a-user\">Add Roles for a User<\/a><\/h3>\n<p><code>PATCH \/data\/:id\/roles<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123\/roles&#39;)\n\t.patch(&quot;newRole&quot;)\n\t.then(function(response) {\n\t\t\/\/ The role was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#update-roles-for-a-user\" name=\"update-roles-for-a-user\">Update Roles for a User<\/a><\/h3>\n<p><code>PUT \/data\/:id\/roles<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/users.&lt;project&gt;.wedeploy.io\/data\/123\/roles&#39;)\n\t.put([&quot;role1&quot;, &quot;role2&quot;])\n\t.then(function(response) {\n\t\t\/\/ The role was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>",
	"name": "WeDeploy Users",
	"description": "Sign up, sign in and logout your users via RESTful APIs by this users management microservice",
	"iconUrl": "\/static\/registry\/wedeploy-users\/icon.png",
	"readme": "WeDeploy Users\n=============\n\nThis container provides a powerful users microservice for WeDeploy. It's able to sign up, login, logout, and manage users, via RESTful APIs.\n\n0. Launch your project in a few clicks.\n0. Signup, login, and logout APIs.\n0. Send reset password link and reset password APIs.\n0. Configure your login and logout redirect URLs.\n0. Securely store the user's password.\n0. Simple RESTful API.\n\nUsage\n-----\n\nThe first thing you have to do is install the container with an id of your preference, e.g. `users`. After the container is installed, the users container exposes RESTful APIs for you to use.\n\n\n### Create a User\n\n`POST \/data`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data')\n\t.form('email', 'user@domain.com')\n\t.form('password', 'password')\n\t.form('foo', 'bar')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ User stored!\n\t\tconsole.log('User id', response.body().id);\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\npassword\t | string (required) | The password used for user credentials.\npermissions\t | array.<string>    | Array of strings with user permissions.\nroles    \t | array.<string>    | Array of strings with user roles.\n\n### Get All Users\n\n`GET \/data`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('All users', response.body());\n\t});\n```\n\n### Get a User\n\n`GET \/data\/:id`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('User', response.body());\n\t});\n```\n\n### Delete a User\n\n`DELETE \/data\/:id`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123')\n\t.delete()\n\t.then(function(response) {\n\t\t\/\/ The user was successfully deleted.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Send Reset Password Link to a User\n\n`POST \/reset-password-link`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/reset-password-link')\n    .form('email', 'user@domain.com')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The reset password link was successfully sent.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\n\n### Reset a User's Password\n\n`POST \/reset-password`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/reset-password-link')\n    .form('email', 'user@domain.com')\n    .form('password', 'newPassword')\n    .form('token', 'token')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The password was successfully reset.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\npassword\t | string (required) | The new password used for user credentials.\ntoken    \t | string (required) | The reset password token received on the email.\n\n### Add Permissions for a User\n\n`PATCH \/data\/:id\/permissions`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123\/permissions')\n\t.patch(\"newPermission\")\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Update Permissions for a User\n\n`PUT \/data\/:id\/permissions`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123\/permissions')\n\t.put([\"permission1\", \"permission2\"])\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Add Roles for a User\n\n`PATCH \/data\/:id\/roles`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123\/roles')\n\t.patch(\"newRole\")\n\t.then(function(response) {\n\t\t\/\/ The role was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Update Roles for a User\n\n`PUT \/data\/:id\/roles`\n\n```js\nWeDeploy.url('http:\/\/users.<project>.wedeploy.io\/data\/123\/roles')\n\t.put([\"role1\", \"role2\"])\n\t.then(function(response) {\n\t\t\/\/ The role was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n",
	"id": "wedeploy-users",
	"category": "Infrastructure",
	"type": "wedeploy\/users:latest"
}]
